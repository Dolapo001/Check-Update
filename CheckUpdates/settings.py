"""
Django settings for CheckUpdates project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

import dj_database_url
from corsheaders.defaults import default_headers
from dotenv import load_dotenv
import os
from common.middleware import BlacklistMiddleware
from .jazzmin import JAZZMIN_SETTINGS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

DEBUG = os.getenv('DEBUG')
ALLOWED_HOSTS = ['*']

#SECRET_KEY = os.getenv('SECRET_KEY')

SECRET_KEY='django-insecure-jkyq(ct1@zyaa_z)_2!iw04n!4o_kvsc36d*sqh=5nj1efl4v#'

# SECRET_KEY='django-insecure-jkyq(ct1@zyaa_z)_2!iw04n!4o_kvsc36d*sqh=5nj1efl4v#'

DJANGO_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
LOCAL_APPS = [
    "common.apps.CommonConfig",
    "core.apps.CoreConfig",
    "admin_roles.apps.AdminRolesConfig",
    "blog.apps.BlogConfig"
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_spectacular",
    "celery",
    'debug_toolbar',
]


INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    #"csp.middleware.CSPMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "common.middleware.BlacklistMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "admin_roles.middleware.AdminAccessMiddleware",
    "admin_roles.middleware.RoleBasedAccessMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

INTERNAL_IPS = [
    "127.0.0.1",
]

if DEBUG:
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: True,
        "INTERCEPT_REDIRECTS": False,
    }


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "common.authentication.CustomJWTAuthentication",  # Use custom JWT authentication
    ),
    "COERCE_DECIMAL_TO_STRING": False,
    #"EXCEPTION_HANDLER": "apps.common.exception_handler.CustomExceptionHandler.handle",  # noqa
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 30,
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "10000/day", "user": "50000/day"},
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_PARSER_CLASSES": ("rest_framework.parsers.JSONParser",),

}


# expose headers you want front-end JS to be able to read
CORS_EXPOSE_HEADERS = [
    "etag",
    "cache-control",
]

CORS_ALLOW_HEADERS =  list(default_headers) + [
    "if-none-match",
    "cache-control",
    "accept",
    "accept-language",
    "authorization",
    "content-type",
    "content-disposition",
    "content-encoding",
    "content-length",
    "cookie",
    "host",
    "origin",
    "referer",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-forwarded-for",
    "access-control-request-headers",
    "access-control-request-method",
    "if-none-match",
]


CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "http://10.5.0.2:3000",
]


SPECTACULAR_SETTINGS = {
    "TITLE": "CheckUpdate API",
    "DESCRIPTION": """

    """,
    "VERSION": "1.0.0",
    "CONTACT": "",
    "SCHEMA_PATH_PREFIX": r"/api/v[0-9]",
    "SERVE_INCLUDE_SCHEMA": False,
    "DISABLE_ERRORS_AND_WARNINGS": True,
}

AUTH_USER_MODEL = "core.User"
#AUTH_USER_MODEL = 'admin_roles.AdminUser'
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),  # Adjust as needed
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # Adjust as needed
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,  # Use your Django secret key or a separate JWT secret
    # Custom token claims and authentication settings
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    # Token blacklist settings (if using blacklisting feature)
    "BLACKLIST_ENABLED": True,
    "JTI_CLAIM": "jti",
}


ROOT_URLCONF = 'CheckUpdates.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core/templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CheckUpdates.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    "default": dj_database_url.parse(
        os.getenv("DATABASE_URL"),
        conn_max_age=600,  # 10 minutes
        ssl_require=True
    )
}

DATABASES['default']['OPTIONS'] = {
    "application_name": "check-update-vercel",
    "sslmode": "require",
}

CACHE_TTL = int(os.getenv("CACHE_TTL", "60"))
REDIS_URL = os.getenv("REDIS_URL")  # may be None in prod

def locmem_cache():
    return {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-checkupdate-fallback",
        }
    }

if REDIS_URL:
    # try to use redis, but fall back if it fails to connect
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
            "KEY_PREFIX": "check_update",
        }
    }

    # optional: sanity check so app doesn't crash at import-time with unreachable host
    try:
        import redis as _redis
        _client = _redis.from_url(REDIS_URL, socket_connect_timeout=2)
        _client.ping()
    except Exception:
        # couldn't connect â€” fallback to locmem
        CACHES = locmem_cache()
else:
    CACHES = locmem_cache()

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    "core.auth_backends.EmailAuthBackend",
    "django.contrib.auth.backends.ModelBackend",
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Make sure these settings are properly configured
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'





def str_to_bool(value):
    return str(value).lower() in ['true', '1', 'yes']


# Email configuration
# settings.py - Fix email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv("ZEPTOMAIL_SMTP_SERVER", "smtp.zeptomail.com")
EMAIL_PORT = int(os.getenv("ZEPTOMAIL_SMTP_PORT", 587))
EMAIL_HOST_USER = os.getenv("ZEPTOMAIL_USERNAME", "emailapikey")
EMAIL_HOST_PASSWORD = os.getenv("ZEPTOMAIL_PASSWORD", "")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False  # Since you're using port 587 with TLS
DEFAULT_FROM_EMAIL = os.getenv("ZEPTOMAIL_FROM_EMAIL", "security@checkupdate.ng")
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_TIMEOUT = 10
EMAIL_SEND_RETRY_COUNT = 1
EMAIL_SEND_RETRY_BACKOFF = 0.5

# ZeptoMail specific configuration (for custom implementation)
ZEPTOMAIL_CONFIG = {
    'SMTP_SERVER': EMAIL_HOST,
    'SMTP_PORT': EMAIL_PORT,
    'USERNAME': EMAIL_HOST_USER,
    'PASSWORD': EMAIL_HOST_PASSWORD,
    'FROM_EMAIL': DEFAULT_FROM_EMAIL,
}

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("Using console email backend for development")
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


# Other settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_NAME = 'checkupdate_session'
SESSION_COOKIE_AGE = 3600
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
FRONTEND_URL = "http://127.0.0.1:3000"

#FRONTEND_URL = os.getenv('FRONTEND_URL')
SUPPORT_EMAIL = "info@checkupdate.ng"
COMPANY_NAME = "Check Update"


JAZZMIN_SETTINGS = JAZZMIN_SETTINGS

# Logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # REMOVED the 'file' handler completely
    },
    "loggers": {
        "django": {
            "handlers": ["console"],  # Removed 'file' handler
            "level": "INFO",
        },
        "django.request": {
            # Changed to console handler since file handler is gone
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "rest_framework": {
            "handlers": ["console"],  # Removed 'file' handler
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Report-only CSP for development or testing purposes (doesnâ€™t block, only reports)  # noqa
# CONTENT_SECURITY_POLICY_REPORT_ONLY = {
#     "EXCLUDE_URL_PREFIXES": ["/excluded-path/"],
#     "DIRECTIVES": {
#         "default-src": [None],  # Block all resources by default
#         "connect-src": [
#             "'self'"
#         ],  # Allow same-origin connections for WebSocket, AJAX, etc.
#         "img-src": [
#             "'self'",
#             "https://res.cloudinary.com",
#         ],  # Restrict image sources to same-origin
#         "media-src": [
#             "'self'",
#             "https://res.cloudinary.com",
#         ],  # Allow media files from Cloudinary
#         "form-action": ["'self'"],  # Allow forms to submit to same-origin only
#         "frame-ancestors": ["'self'"],  # Only allow embedding within the same-origin
#         "script-src": ["'self'"],  # Restrict JavaScript to same-origin
#         "style-src": ["'self'"],  # Restrict CSS to same-origin
#         "upgrade-insecure-requests": True,  # Enforce HTTPS for all requests
#         "report-uri": "/csp-report/",  # Reporting endpoint for testing purposes
#     },
# }

